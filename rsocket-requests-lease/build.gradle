/*
 * Copyright 2020 - present Maksym Ostroverkhov.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'com.google.protobuf'
    id 'idea'
}

dependencies {
    protobuf project(':rsocket-requests-lease-idl')

    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation "com.jauntsdn.rsocket:rsocket-core:${rsocketVersion}"
    implementation "com.jauntsdn.rsocket:rsocket-rpc-core:${rsocketVersion}"
    implementation "com.jauntsdn.rsocket:rsocket-transport-netty:${rsocketVersion}"
    implementation "org.hdrhistogram:HdrHistogram:${hdrHistogramVersion}"

    runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"
}

idea {
    module {
        sourceDirs += file("src/main/proto")
        sourceDirs += file("src/generated/main/java")
        sourceDirs += file("src/generated/main/rsocketRpc")

        generatedSourceDirs += file('src/generated/main/java')
        generatedSourceDirs += file('src/generated/main/rsocketRpc')
    }
}

if (findProperty("generateProto") == "true") {
    sourceSets {
        main {
            proto { srcDir "src/main/proto" }
        }
    }

    protobuf {
        generatedFilesBaseDir = "${projectDir}/src/generated"
        protoc {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }
        plugins {
            rsocketRpc {
                artifact = "com.jauntsdn.rsocket:rsocket-rpc-protobuf:${rsocketVersion}"
            }
            generateProtoTasks {
                ofSourceSet('main')*.plugins {
                    rsocketRpc {
                        option "generate-blocking-api"
                    }
                }
            }
        }
    }

    clean {
        delete 'src/generated'
    }
} else {
    sourceSets {
        main {
            java { srcDir 'src/generated' }
        }
    }
    tasks.whenTaskAdded {task ->
        if(task.name.contains("generateProto")) {
            task.enabled = false
        }
    }
}

tasks.withType(JavaExec) {
    systemProperties System.properties
}

task runServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.jauntsdn.rsocket.lease.showcase.Server'
}

task runClient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.jauntsdn.rsocket.lease.showcase.Client'
}

task runProxy(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.jauntsdn.rsocket.lease.showcase.Proxy'
}